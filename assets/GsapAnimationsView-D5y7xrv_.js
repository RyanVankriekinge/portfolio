import{j as y,o as w,k as P,f as S,c as x,b as r,a as b,e as G,g as C}from"./index-K0O77jaj.js";import{T as D}from"./typeWriterAnimation-BwcthBjB.js";/* empty css                                                                     */const E={id:"eyeSVG",viewBox:"0 0 1000 1000"},M={__name:"EyeAnimation",setup(A){return w(()=>{const d=document.querySelector("#eyeSVG"),a=d.createSVGPoint(),l=n("#eye-left"),c=n("#eye-right");let i=null;const t=()=>{const e=a.matrixTransform(d.getScreenCTM().inverse());l.rotateTo(e),c.rotateTo(e),i=null},s=e=>{a.x=e.clientX,a.y=e.clientY,i||(i=requestAnimationFrame(t))};window.addEventListener("mousemove",s),P(()=>{window.removeEventListener("mousemove",s)});function n(e){const v=document.querySelector(e);return{rotateTo(p){const o=v.getBBox(),m=o.x+o.width/2,h=o.y+o.height/2,V=p.x-m,k=p.y-h,u=Math.atan2(k,V),g=v.querySelector(".pupil"),f=30,_=m+f*Math.cos(u),I=h+f*Math.sin(u);g.setAttribute("cx",_),g.setAttribute("cy",I)}}}}),(d,a)=>(S(),x("svg",E,a[0]||(a[0]=[r('<polygon id="diamond-shape" points="250,50 850,500 700,950 150,500" fill="#57378b" data-v-07e91c3f></polygon><g id="eye-left" data-v-07e91c3f><circle class="eyeball" cx="300" cy="500" r="190" data-v-07e91c3f></circle><circle class="pupil" cx="300" cy="500" r="100" data-v-07e91c3f></circle></g><g id="eye-right" data-v-07e91c3f><circle class="eyeball" cx="700" cy="500" r="190" data-v-07e91c3f></circle><circle class="pupil" cx="700" cy="500" r="100" data-v-07e91c3f></circle></g>',3)])))}},j=y(M,[["__scopeId","data-v-07e91c3f"]]),L={class:"outer-wrapper"},T={class:"wrapper"},q={class:"section"},B={class:"column"},N={__name:"GsapAnimationsView",setup(A){return w(()=>{const d=(t,s)=>{t.forEach(n=>{n.isIntersecting&&(C.to(n.target,{opacity:1,y:0,duration:1,ease:"power3.out"}),s.unobserve(n.target))})},a=new IntersectionObserver(d,{threshold:.2});document.querySelectorAll(".section").forEach(t=>{a.observe(t)}),document.querySelectorAll(".section img").forEach(t=>{a.observe(t)});const i=document.querySelectorAll("h2.typing-animation");i.length>0&&D(i)}),(d,a)=>(S(),x("main",null,[b("div",L,[b("div",T,[b("div",q,[a[0]||(a[0]=r('<h2 class="prototype-title title typing-animation" data-v-b8e3d7ba>Dynamic animations and transitions</h2><div class="column" data-v-b8e3d7ba><p data-v-b8e3d7ba>A prototype that researched the use of animations with text and shapes on a responsive website.</p><br data-v-b8e3d7ba><p style="display:inline;" data-v-b8e3d7ba>Link to git repo:</p><a href="https://github.com/EHB-MCT/expertlab-pt3-RyanVankriekinge/" target="_blank" style="color:azure;font-family:&#39;Oswald&#39;, sans-serif;font-size:16px;" data-v-b8e3d7ba>Prototype: Dynamic transitions</a><h3 data-v-b8e3d7ba>Goals:</h3><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>Create dynamic animations for my portfolio page</li><li data-v-b8e3d7ba>Learning how to use different js animation libraries and how to choose the appropriate library for each individual project.</li><li data-v-b8e3d7ba>Learning how to integrate transitions and animations in a one page Vue application.</li><li data-v-b8e3d7ba>Learning how to create and animate shapes and text while keeping the website responsive for all screen sizes.</li></ul><h3 data-v-b8e3d7ba>Used technologies:</h3><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>Adobe XD: Designing my application visually before developing it</li><li data-v-b8e3d7ba>Vue.js: Chosen front-end framework</li></ul></div>',2)),b("div",B,[G(j)])]),a[1]||(a[1]=r('<div class="section" data-v-b8e3d7ba><h2 class="prototype-title title typing-animation" data-v-b8e3d7ba>Process: Design</h2><p data-v-b8e3d7ba>Since this prototype was the first contribution to my portfolio website, I started by designing this website in Adobe XD. This design was based on my own personal style guide, which I created earlier for my curriculum vitae. </p><br data-v-b8e3d7ba><p data-v-b8e3d7ba>After designing the page, I started thinking about which animation would look good on each element. I put these in a list and added them to my planning. </p></div><div class="section" data-v-b8e3d7ba><h2 class="prototype-title title typing-animation" data-v-b8e3d7ba>Animations</h2><h3 data-v-b8e3d7ba>Defining requirements</h3><p class="list-header" data-v-b8e3d7ba>I had the following needs for my animations:</p><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>Responsiveness</li><li data-v-b8e3d7ba>Beginner-friendly library</li><li data-v-b8e3d7ba>Performance</li><li data-v-b8e3d7ba>Support for major browsers</li></ul><p class="list-header" data-v-b8e3d7ba>Key features I wanted to implement:</p><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>Page transitions on router change</li><li data-v-b8e3d7ba>Hover effects on navigation and buttons</li><li data-v-b8e3d7ba>Scrolling animations</li><li data-v-b8e3d7ba>Element transformations</li></ul><h3 data-v-b8e3d7ba>Choosing a librarie</h3><p data-v-b8e3d7ba>To choose a library, I looked at some of the most commonly used animation libraries. I compared these on beginner-friendliness, performance, use case, support, integration with the framework I&#39;ll be using (which is Vue) and how many resources are available. I chose GSAP because it&#39;s perfect for creating complex animations like scroll effects and timelines. It’s beginner-friendly, but powerful compared to other libraries and it has a big community with a lot of free resources. For simple transitions like fades or hovers, I relied on CSS and Vue’s built-in transition system, this is more lightweight and easy to use for basic animations without extra complexity.</p><table class="animations-libraries-table" data-v-b8e3d7ba><thead data-v-b8e3d7ba><tr data-v-b8e3d7ba><th data-v-b8e3d7ba>Library</th><th data-v-b8e3d7ba>Complexity</th><th data-v-b8e3d7ba>Performance</th><th data-v-b8e3d7ba>Use Case</th><th data-v-b8e3d7ba>SVG Support</th><th data-v-b8e3d7ba>Physics Support</th><th data-v-b8e3d7ba>Integration with Vue</th><th data-v-b8e3d7ba>Community</th></tr></thead><tbody data-v-b8e3d7ba><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Vanilla JS &amp; CSS</td><td data-v-b8e3d7ba>Low</td><td data-v-b8e3d7ba>High (direct DOM control)</td><td data-v-b8e3d7ba>Simple animations, CSS transitions</td><td data-v-b8e3d7ba>Basic (CSS only)</td><td data-v-b8e3d7ba>Custom-built</td><td data-v-b8e3d7ba>Native to Vue (templates, lifecycle hooks)</td><td data-v-b8e3d7ba>Very large, many free resources</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>GSAP</td><td data-v-b8e3d7ba>Low</td><td data-v-b8e3d7ba>Very High (optimized engine)</td><td data-v-b8e3d7ba>Advanced 2D/3D animations, UI/UX effects</td><td data-v-b8e3d7ba>Excellent</td><td data-v-b8e3d7ba>Yes (via plugins like Physics2D)</td><td data-v-b8e3d7ba>Seamless with Vue; Vue-specific plugins available</td><td data-v-b8e3d7ba>Large, rich resources, active forums</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Framer Motion</td><td data-v-b8e3d7ba>Moderate (React focus)</td><td data-v-b8e3d7ba>High (React-optimized)</td><td data-v-b8e3d7ba>React animations, UI/UX in React apps</td><td data-v-b8e3d7ba>Good</td><td data-v-b8e3d7ba>Basic</td><td data-v-b8e3d7ba>Not designed for Vue; significant adjustments needed</td><td data-v-b8e3d7ba>Large for React, not for Vue</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>two.js</td><td data-v-b8e3d7ba>Low</td><td data-v-b8e3d7ba>High (2D focused)</td><td data-v-b8e3d7ba>Vector-based animations, artistic 2D</td><td data-v-b8e3d7ba>Excellent</td><td data-v-b8e3d7ba>Limited</td><td data-v-b8e3d7ba>Works in Vue lifecycle hooks (e.g., mounted)</td><td data-v-b8e3d7ba>Moderate, pretty niche, with good docs</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>three.js</td><td data-v-b8e3d7ba>High (requires 3D knowledge)</td><td data-v-b8e3d7ba>High (GPU-accelerated)</td><td data-v-b8e3d7ba>3D web animations, interactive graphics</td><td data-v-b8e3d7ba>Limited</td><td data-v-b8e3d7ba>Limited</td><td data-v-b8e3d7ba>Well-supported with libraries like vue-threejs</td><td data-v-b8e3d7ba>Very large, extensive tutorials and examples</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Anime.js</td><td data-v-b8e3d7ba>Low</td><td data-v-b8e3d7ba>High</td><td data-v-b8e3d7ba>Artistic, timeline-based 2D animations</td><td data-v-b8e3d7ba>Excellent</td><td data-v-b8e3d7ba>No</td><td data-v-b8e3d7ba>Works well with Vue lifecycle hooks (e.g., mounted)</td><td data-v-b8e3d7ba>Moderate, good tutorials and examples</td></tr></tbody></table><h3 data-v-b8e3d7ba>Installation methods</h3><p class="list-header" data-v-b8e3d7ba>GSAP has 3 popular installation methods:</p><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>CDN: Quick set-up for small projects without version control</li><li data-v-b8e3d7ba>NPM: Best for projects using frameworks like Vue, bigger community than Yarn</li><li data-v-b8e3d7ba>Yarn: Faster and more secure than NPM, but less resources</li></ul><p style="margin-top:15px;" data-v-b8e3d7ba>I chose NPM for its large community and compatibility with other dependencies in my project.</p></div><div class="section" data-v-b8e3d7ba><h2 class="prototype-title title typing-animation" data-v-b8e3d7ba>Development</h2><h3 data-v-b8e3d7ba>Animations with Vue</h3><p data-v-b8e3d7ba>I used Vue&#39;s built-in animation system for simple transitions (fades and slides)</p><h3 data-v-b8e3d7ba>Animation scripts used with GSAP</h3><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>gsap.from: Animating from defined starting state</li><li data-v-b8e3d7ba>gsap.to: Animating to a defined ending state</li><li data-v-b8e3d7ba>gsap.fromTo: Specifies both start and end state</li><li data-v-b8e3d7ba>gsap.set: immediately applies properties (like a hold keyframe)</li><li data-v-b8e3d7ba>ScrollTrigger: Triggers animations based on the user&#39;s scroll position</li></ul><h3 data-v-b8e3d7ba>Animation techniques used with GSAP</h3><ul data-v-b8e3d7ba><li data-v-b8e3d7ba>Easing: For more natural animations</li><li data-v-b8e3d7ba>Staggers: Adds delay when animating multiple elements with the same animation (e.g. the page with my works)</li><li data-v-b8e3d7ba>Timeline: Creating sequenced animations</li></ul></div><div class="section" data-v-b8e3d7ba><h2 class="prototype-title title typing-animation" data-v-b8e3d7ba>Challenges</h2><table class="challenges-table" data-v-b8e3d7ba><thead data-v-b8e3d7ba><tr data-v-b8e3d7ba><th data-v-b8e3d7ba>Challenge</th><th data-v-b8e3d7ba>Resolution</th></tr></thead><tbody data-v-b8e3d7ba><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Mobile menu animation not showing</td><td data-v-b8e3d7ba>Adjusted animation starting position using a larger value for <code data-v-b8e3d7ba>x</code> to fully hide elements off-screen.</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>SVG shapes not rendering</td><td data-v-b8e3d7ba>Implemented <code data-v-b8e3d7ba>viewBox</code> in SVG for proper scaling and visibility.</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Responsiveness issues on small screens</td><td data-v-b8e3d7ba>Used <code data-v-b8e3d7ba>min-height</code> and adjusted container paddings for better alignment.</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Overlapping text and shapes</td><td data-v-b8e3d7ba>Added margin between sections and tested scaling behavior.</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Scroll-triggered animations appearing at incorrect times</td><td data-v-b8e3d7ba>Adjusted trigger points and animation end positions for natural flow.</td></tr><tr data-v-b8e3d7ba><td data-v-b8e3d7ba>Elements in group not staggered</td><td data-v-b8e3d7ba>Used <code data-v-b8e3d7ba>&gt; *</code> selector for child elements to apply GSAP stagger efficiently.</td></tr></tbody></table></div><div class="section" data-v-b8e3d7ba><h2 class="prototype-title title typing-animation" data-v-b8e3d7ba>Reflection</h2><p data-v-b8e3d7ba>This sprint allowed me to gain hands-on experience with GSAP, ScrollTrigger, and Vue’s animation system, refining both my technical skills and understanding of responsiveness.</p><p data-v-b8e3d7ba>In the future, I want to further optimise my website’s performance and explore more advanced GSAP techniques.</p></div>',5))])])]))}},X=y(N,[["__scopeId","data-v-b8e3d7ba"]]);export{X as default};
