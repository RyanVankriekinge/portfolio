import{p as n}from"./prototypeFlashQuiz-DIeuf4D6.js";import{j as l,o as r,c as d,b as c,g as p,f as h}from"./index-X-nx42wA.js";import{T as b}from"./typeWriterAnimation-C-Zl24YN.js";const u="/portfolio/assets/flashquizmoodboard-DyCagC0D.png",m="/portfolio/assets/flashquizdesignxd-9nXRog30.png",v="/portfolio/assets/flashquizclasses.drawio-DJ1zV5qY.png",g={__name:"FlashQuizView",setup(f){return r(()=>{const i=(a,o)=>{a.forEach(t=>{t.isIntersecting&&(p.to(t.target,{opacity:1,y:0,duration:1,ease:"power3.out"}),o.unobserve(t.target))})},e=new IntersectionObserver(i,{threshold:.2});document.querySelectorAll(".section").forEach(a=>{e.observe(a)}),document.querySelectorAll(".section img").forEach(a=>{e.observe(a)});const s=document.querySelectorAll("h2.typing-animation");s.length>0&&b(s)}),(i,e)=>(h(),d("main",null,e[0]||(e[0]=[c('<div class="outer-wrapper" data-v-2b687596><div class="wrapper" data-v-2b687596><div class="section" data-v-2b687596><h2 class="prototype-title title typing-animation" data-v-2b687596>FlashQuiz</h2><div class="column" data-v-2b687596><p data-v-2b687596>FlashQuiz is a quiz app that allows users to create, host and play quizzes instantly.</p><br data-v-2b687596><p style="display:inline;" data-v-2b687596>Link to git repo:</p><a href="https://github.com/EHB-MCT/expertlab-pt1-RyanVankriekinge/" target="_blank" style="color:azure;font-family:&#39;Oswald&#39;, sans-serif;font-size:16px;" data-v-2b687596>Prototype: FlashQuiz</a><h3 data-v-2b687596>Goals:</h3><ul data-v-2b687596><li data-v-2b687596>Develop a quiz app using WebSockets for real-time communication</li><li data-v-2b687596>Design an intuitive and appealing user interface</li><li data-v-2b687596>Implement a scalable and secure data storage system</li></ul><h3 data-v-2b687596>Used technologies:</h3><p data-v-2b687596>Design and front-end:</p><ul data-v-2b687596><li data-v-2b687596>Adobe XD: Designing my application visually before developing it</li><li data-v-2b687596>Vue.js: Chosen front-end framework</li></ul><p data-v-2b687596>Back-end:</p><ul data-v-2b687596><li data-v-2b687596>Node.js: Used to run the back-end server and handle server-side logic</li><li data-v-2b687596>Socket.IO: Integrated for real-time communication via WebSockets to enable live features</li><li data-v-2b687596>MongoDB: saving users, quizzes and lobbies</li></ul></div><div class="column" data-v-2b687596><img class="work-top-image" src="'+n+'" data-v-2b687596></div></div><div class="section" data-v-2b687596><h2 class="prototype-title title typing-animation" data-v-2b687596>Process: Design</h2><h3 class="image-title first-title" data-v-2b687596>Moodboard</h3><p data-v-2b687596>Since I wanted to implement many features, I aimed to efficiently and quickly develop a style suitable for a quiz app. To achieve this, I researched other quiz apps and colors typically associated with speed (as the app is named &quot;FlashQuiz&quot;). Additionally, I explored existing lobby systems and determined which user interfaces work best for this type of application. Based on this research, I created a mood board and designed a simple, user-friendly interface in Adobe XD.</p><img src="'+u+'" data-v-2b687596><h3 class="image-title" data-v-2b687596>Design</h3><p data-v-2b687596>I chose to create a mobile design that easily extends to desktop because quiz apps are typically used on-the-go, making mobile the most convenient option. A mobile-first approach is also recommended for web development as it prioritizes performance and user experience and it&#39;s easy to scale up to a desktop design.</p><img src="'+m+'" data-v-2b687596></div><div class="section" data-v-2b687596><div class="column" data-v-2b687596><h2 class="prototype-title title typing-animation" data-v-2b687596>Process: Development</h2><h3 data-v-2b687596>Classes</h3><p data-v-2b687596>I created a class diagram (UML) in draw.io and made sure to include all the important classes that are needed to allow users to create an account, quizzes with questions and lobbies. </p><h3 data-v-2b687596>Storing my data with MongoDB</h3><p data-v-2b687596>I opted for a Node.js back-end combined with a MongoDB database. I chose MongoDB because it handles different quiz formats better than relational databases, which need rigid schemas. For example, you can easily store different types of questions in the same collection, with each type having its own structure. It manages complex data like questions and answers efficiently, scales well for high traffic, and speeds up development with its simple document-based structure.</p><h3 data-v-2b687596>WebSockets with socket.io</h3><p data-v-2b687596> I chose to use Socket.IO for this project because it seems the most suitable. It’s beginner-friendly, automatically handles reconnecting and fallbacks, and integrates smoothly with Node.js. The event-driven model works well with Vue, making it easy to update the front-end in real-time. It works well with MongoDB, enabling instant data synchronization across clients. Socket.IO also reduces setup complexity, allowing me to focus on building features rather than managing real-time communication.</p></div><div class="column" data-v-2b687596><img src="'+v+'" data-v-2b687596></div></div><div class="section" data-v-2b687596><h2 class="prototype-title title typing-animation" data-v-2b687596>Reflection</h2><h3 data-v-2b687596>Challenges and solutions</h3><ol data-v-2b687596><li data-v-2b687596>Underestimated scope: I made this project during a sprint of only 2 weeks, so my goals were quite ambitious. I tried to implement too many features in a short time frame. I should prioritize critical features and plan thoroughly to avoid this issue in the future. </li><li data-v-2b687596>Database access issues: MongoDB was initially inaccessible from home due to IP restrictions. After identifying the problem, I updated this in the MongoDB Atlas Client. </li><li data-v-2b687596> Some variables, like the player count in the lobby, did not update when changes occurred in the database. This happened because I passed these variables as props from the page where the lobby was joined. The solution was to retrieve this data directly on the lobby page and update it via emits. </li><li data-v-2b687596>Real-Time Updates for host: Occasionally, the host account would not receive certain emits, such as a player joining or the quiz starting. I partially resolved this by tweaking the emits, but the issue still occasionally occurs. To date, I haven’t fully solved this problem. </li></ol><h3 data-v-2b687596>What I learned</h3><ol data-v-2b687596><li data-v-2b687596>Efficiently integrating WebSockets with front-end frameworks.</li><li data-v-2b687596>The importance of realistic workload estimation and prioritization.</li><li data-v-2b687596>Debugging through structured problem-solving and techniques like the rubber duck principle.</li><li data-v-2b687596>Creating scalable back-end systems for real-time applications.</li></ol></div></div></div>',1)])))}},q=l(g,[["__scopeId","data-v-2b687596"]]);export{q as default};
